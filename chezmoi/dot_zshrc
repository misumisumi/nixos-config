
# Calc startup time
# zmodload zsh/zprof
# zprof

typeset -U path cdpath fpath manpath

for profile in ${(z)NIX_PROFILES}; do
  fpath+=($profile/share/zsh/site-functions $profile/share/zsh/$ZSH_VERSION/functions $profile/share/zsh/vendor-completions)
done

HELPDIR=/usr/share/zsh/"${ZSH_VERSION}"/help

ABBR_QUIET="1"
ZVM_LAZY_KEYBINDINGS=false
ZVM_LINE_INIT_MODE="$ZVM_MODE_INSERT"
ZVM_VI_INSERT_ESCAPE_BINDKEY="jj"
ZVM_VI_OPPEND_ESCAPE_BINDKEY="jj"
ZVM_VI_VISUAL_ESCAPE_BINDKEY="jj"
setopt EXTENDED_GLOB         # 拡張GRUBの有効化(^: 否定、~: 除外)
setopt BARE_GLOB_QUAL        # 条件付け検索の有効化
setopt MAGIC_EQUAL_SUBST     # cmd a=/to/pathの時に補完を効かせる
setopt HIST_IGNORE_SPACE     # 先頭にスペースがあるコマンドは履歴に残さない

# install zinit
declare -A ZINIT
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

function _check_cmd() {
  command -v "$1" &>/dev/null
}

if _check_cmd brew && [ -x $(brew --prefix mise)/bin/mise ]; then
  eval "$($(brew --prefix mise)/bin/mise activate zsh)"
  eval "$($(brew --prefix mise)/bin/mise completion zsh)"
elif [ -x ~/.local/bin/mise ]; then
  eval "$(~/.local/bin/mise activate zsh)"
  eval "$(~/.local/bin/mise completion zsh)"
fi

# The plugin will auto execute this zvm_after_init function
function zvm_after_init() {
    # Binding keys for zsh-abbr
if [[ $options[zle] = on ]]; then
  if _check_cmd fzf; then
    eval "$(fzf --zsh)"
  fi
fi

}

# zinit wait lucid for \
zinit for \
  PZTM::environment \
  PZTM::terminal


zinit wait'0a' lucid for \
 PZTM::directory \
  PZTM::spectrum


zinit lucid blockf depth=1 light-mode  for \
  atload'zvm_init' \
  jeffreytse/zsh-vi-mode \
  zsh-users/zsh-autosuggestions \
  marlonrichert/zsh-autocomplete
zinit wait'!1a' lucid blockf depth=1 light-mode for \
  zdharma-continuum/fast-syntax-highlighting
zinit wait'0b' lucid nocd depth=1 light-mode for \
  olets/zsh-abbr
zinit wait'1b' lucid depth=1 light-mode for \
  hlissner/zsh-autopair
# zinit wait'1c' lucid for \
#   atload'. ./aichat.zsh' https://raw.githubusercontent.com/sigoden/aichat/refs/heads/main/scripts/completions/aichat.zsh

eval $(dircolors -b ~/.dir_colors)

# History options should be set in .zshrc and after oh-my-zsh sourcing.
# See https://github.com/nix-community/home-manager/issues/177.
HISTSIZE="10000"
SAVEHIST="10000"
HISTORY_IGNORE='(builtin cd *|cd *|history *|kill *|ls *|mkdir *|pkill *|rm *|trans *)'
HISTFILE="$HOME/.zsh_history"

setopt HIST_FCNTL_LOCK
unsetopt APPEND_HISTORY
setopt HIST_IGNORE_DUPS
unsetopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
unsetopt HIST_EXPIRE_DUPS_FIRST
setopt SHARE_HISTORY
setopt EXTENDED_HISTORY
setopt autocd

# Enable bash completion
autoload -U bashcompinit && bashcompinit

set vi-cmd-mode-string "\1\e[?8c\2"
set vi-ins-mode-string "\1\e[?0c\2"
# For marlonrichert/zsh-autocomplete
zstyle -e ':autocomplete:history-search-backward:*' list-lines 'reply=$(( LINES / 2 ))'
zstyle ':autocomplete:*' min-delay 0.05
zstyle ':completion:*' completer \
    _complete _complete:-fuzzy _correct _approximate _ignored
bindkey '\t' menu-select "$terminfo[kcbt]" menu-select
bindkey -M menuselect '\t' menu-complete "$terminfo[kcbt]" reverse-menu-complete

if [[ $TERM != "dumb" && $TERM != "linux" ]]; then
  if _check_cmd starship; then
    eval "$(starship init zsh)"
  fi
fi

if _check_cmd chezmoi; then
  eval "$(chezmoi completion zsh)"
fi

if _check_cmd zoxide; then
  eval "$(zoxide init zsh)"
fi

if _check_cmd yazi; then
  function yy() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXX")"
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
      builtin cd -- "$cwd"
    fi
    rm -f -- "$tmp"
  }
fi

if _check_cmd wezterm; then
  eval "$(wezterm shell-completion --shell zsh)"
fi

if [[ $options[zle] = on ]]; then
  if _check_cmd navi; then
    eval "$(navi widget zsh)"
  fi
fi

if test -n "$KITTY_INSTALLATION_DIR"; then
  export KITTY_SHELL_INTEGRATION="no-rc"
  autoload -Uz -- "$KITTY_INSTALLATION_DIR"/shell-integration/zsh/kitty-integration
  kitty-integration
  unfunction kitty-integration
fi

# Aliases
if _check_cmd fastfetch; then
  alias neofetch='fastfetch -c neofetch.jsonc'
fi
if _check_cmd trash; then
  alias temp=trash-empty
  alias tls=trash-list
  alias tm=trash-put
  alias tre=trash-restore
  alias trm=trash-rm
fi
if _check_cmd nvim; then
  alias vimdiff='nvim -d'
fi

if [ -x /home/linuxbrew/.linuxbrew/bin/brew ]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi
if [ -x /opt/homebrew/bin/brew ]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi
